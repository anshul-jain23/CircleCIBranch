# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  save_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: "save_hello_world_output"
          command: echo "Hello World" > /tmp/result/output.txt
      - persist_to_workspace:
          root: /tmp/result
          paths:
            - output.txt
  get_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - attach_workspace:
          at: /tmp/result
      - run:
          name: "Get_hello_world_output"
          command: cat /tmp/result/output.txt
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
  print-hello:
    docker:
      - image: circleci/node:13.8.0
    environment:
      Circle_Compare_Url: My pipeline id is << pipeline.id >> and my git branch is << pipeline.git.branch >>
    steps:
      - run:
          name: "Print pipeline id"
          command: echo  "This is pipeline id << pipeline.id >>"
      - run: echo $Circle_Compare_Url
      - run:
          name: "Print Hello"
          command: echo $Pipeline_User
  print-world:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: "Print World"
          command: "echo World"

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      - say-hello
      - print-hello
      - print-world:
          requires:
            - print-hello
      - save_hello_world_output
      - get_hello_world_output:
          requires:
            - save_hello_world_output
